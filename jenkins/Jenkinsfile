pipeline {
  agent any

  parameters {
    string(name: 'BUCKET', defaultValue: 'thesamuraibucket', description: 'S3 bucket name')
    string(name: 'KEY',    defaultValue: '',               description: 'S3 object key')
  }

  environment {
    AWS_DEFAULT_REGION = 'eu-central-1'
    JENKINS_URL       = "${params.jenkins_url ?: 'https://9216d38c2a3f.ngrok-free.app'}"
  }

  stages {
    stage('Checkout') {
      steps {
        git url: 'https://github.com/NasriMohamedHedi/terraform-infra.git', branch: 'main'
      }
    }

    stage('Terraform Init') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          sh 'terraform init -input=false -reconfigure'
        }
      }
    }

    stage('Terraform Apply') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          sh """
            terraform apply \
              -var 's3_payload_bucket=${BUCKET}' \
              -var 's3_payload_key=${KEY}' \
              -var 'jenkins_url=${JENKINS_URL}' \
              -auto-approve
          """
        }
      }
    }

    stage('Generate Key Pair') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          sh '''
            # Create key if it doesn't exist
            if ! aws ec2 describe-key-pairs \
                  --key-names client-access-key \
                  --region eu-central-1 >/dev/null 2>&1; then

              aws ec2 create-key-pair \
                --key-name client-access-key \
                --region eu-central-1 \
                --query 'KeyMaterial' --output text \
                > /tmp/client-access-key.pem

              chmod 400 /tmp/client-access-key.pem

              # Copy to Jenkins home
              sudo cp /tmp/client-access-key.pem /var/lib/jenkins/client-access-key.pem
              sudo chmod 400 /var/lib/jenkins/client-access-key.pem
            else
              echo "Key pair client-access-key already exists"
            fi
          '''
        }
      }
    }

    stage('Archive Outputs') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          sh 'terraform output -json > outputs.json'
          archiveArtifacts artifacts: 'outputs.json'
        }
      }
    }

    stage('Send SSH Details') {
      steps {
        // bring the PEM file into the workspace so it can be attached
        sh 'cp /var/lib/jenkins/client-access-key.pem client-access-key.pem'

        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          script {
            // 1) Gather the EC2 public IPs
            def ips = sh(
              script: "terraform output -json | jq -r '.ec2_public_ips | values[]'",
              returnStdout: true
            ).trim().split('\n')

            // 2) Build SSH commands
            def sshCommands = ips.collect { ip ->
              "ssh -i client-access-key.pem ubuntu@${ip}"
            }.join('\n')

            // 3) Pull recipient email from S3 payload
            def clientEmail = sh(
              script: "aws s3 cp s3://${BUCKET}/${KEY} - | jq -r '.client_email'",
              returnStdout: true
            ).trim()

            // 4) Send the email with the key attached
            emailext(
              to:                 clientEmail,
              subject:            "ðŸ”‘ Your VM SSH Credentials (Build #${BUILD_NUMBER})",
              body:               """\
Hello!

Your EC2 instance is up and running. To connect, use:

${sshCommands}

You can download your private key below or use the attached file.
Download link: ${env.BUILD_URL}artifact/client-access-key.pem

Cheers,
Jenkins
""",
              attachmentsPattern: 'client-access-key.pem',
              mimeType:           'text/plain'
            )
          }
        }
      }
    }
  } // <-- closes stages

  post {
    always {
      sh 'rm -f /tmp/client-access-key.pem outputs.json client-access-key.pem || true'
    }
    success {
      echo "Pipeline completed successfully!"
    }
    failure {
      echo "Pipeline failed. Check logs for details."
    }
  }
}

