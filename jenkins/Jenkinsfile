pipeline {
  agent any
  parameters {
    string(name: 'BUCKET', defaultValue: 'thesamuraibucket', description: 'S3 bucket name')
    string(name: 'KEY', defaultValue: '', description: 'S3 object key (leave blank for auto-generated timestamp)')
  }
  environment {
    AWS_DEFAULT_REGION = 'eu-central-1'
    JENKINS_URL = "${params.jenkins_url ?: 'https://9216d38c2a3f.ngrok-free.app'}"
    TIMESTAMP = "${new Date().format('yyyyMMdd_HHmmss')}"
  }
  stages {
    stage('Checkout') {
      steps {
        git url: 'https://github.com/NasriMohamedHedi/terraform-infra.git', branch: 'main'
      }
    }
    stage('Terraform Init') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          sh 'terraform init -input=false -reconfigure'
        }
      }
    }
    stage('Terraform Apply') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          script {
            def s3Key = params.KEY ?: "user123_ai_output_${TIMESTAMP}.json"
            sh "aws s3 cp s3://${BUCKET}/${s3Key} payload.json"
            def payload = readJSON file: 'payload.json'
            def serviceType = payload.service_type
            if (serviceType == 'ec2') {
              sh """
                terraform apply \
                  -var 's3_payload_bucket=${BUCKET}' \
                  -var 's3_payload_key=${s3Key}' \
                  -var 'jenkins_url=${JENKINS_URL}' \
                  -auto-approve
                terraform output -raw private_key_pem > client-access-key.pem
                chmod 400 client-access-key.pem
              """
            } else if (serviceType == 'eks') {
              sh """
                terraform apply \
                  -var 's3_payload_bucket=${BUCKET}' \
                  -var 's3_payload_key=${s3Key}' \
                  -auto-approve
              """
            } else {
              error("Invalid service_type: ${serviceType}")
            }
          }
        }
      }
    }
    stage('Install Tools with Ansible') {
      when {
        expression { readJSON(file: 'payload.json').service_type == 'ec2' }
      }
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          script {
            def s3Key = params.KEY ?: "user123_ai_output_${TIMESTAMP}.json"
            def payload = readJSON file: 'payload.json'
            def instance_key = payload.instances.keySet()[0]
            def ip = sh(
              script: "terraform output -json ec2_public_ips | jq -r '.\"${instance_key}\"'",
              returnStdout: true
            ).trim()
            if (!ip) error("No IP found for instance ${instance_key}")
            def toolsList = payload.instances[instance_key].tools_to_install ?: []
            writeFile file: 'inventory.ini', text: "${ip} ansible_user=ubuntu ansible_ssh_private_key_file=${WORKSPACE}/client-access-key.pem"
            timeout(time: 20, unit: 'MINUTES') {
              retry(3) {
                sh """
                  until ssh -i client-access-key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@${ip} 'echo SSH is up'; do
                    echo "Waiting for SSH..."
                    sleep 30
                  done
                """
              }
            }
            ansiblePlaybook(
              playbook: 'ansible/install_tools.yml',
              inventory: 'inventory.ini',
              extraVars: [
                tools_to_install: toolsList
              ]
            )
          }
        }
      }
    }
    stage('Send SSH Details') {
      when {
        expression { readJSON(file: 'payload.json').service_type == 'ec2' }
      }
      steps {
        script {
          def s3Key = params.KEY ?: "user123_ai_output_${TIMESTAMP}.json"
          def payload = readJSON file: 'payload.json'
          def instance_key = payload.instances.keySet()[0]
          def ip
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'aws-terraform-creds',
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
          ]]) {
            ip = sh(
              script: "terraform output -json ec2_public_ips | jq -r '.\"${instance_key}\"'",
              returnStdout: true
            ).trim()
          }
          if (!ip) error("No IP found for instance ${instance_key}")
          def clientEmail = payload.client_email
          archiveArtifacts artifacts: 'client-access-key.pem'
          emailext(
            to: clientEmail,
            replyTo: 'no-reply@apollo-dojo.com',
            subject: "üîë Your VM SSH Credentials",
            body: """\
	Hello,
Your EC2 instance is up and running. Follow these steps:

Download the private key (attached):
client-access-key.pem
Secure the key:
chmod 400 client-access-key.pem
Connect over SSH:
ssh -i client-access-key.pem ubuntu@${ip}
Type ‚Äúyes‚Äù if prompted.
Troubleshooting


Ensure the IP (${ip}) is correct and port 22 is open.
Verify key permissions with ls -l client-access-key.pem.
Cheers,
The Apollo Dojo Samurai Team
""",
attachmentsPattern: 'client-access-key.pem',
mimeType: 'text/plain'
)
}
}
}
}
post {
always {
sh 'rm -f /tmp/client-access-key.pem outputs.json client-access-key.pem payload.json inventory.ini || true'
}
success {
echo "Pipeline completed successfully!"
}
failure {
echo "Pipeline failed. Check logs for details."
}
}
}
