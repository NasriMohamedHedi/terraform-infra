pipeline {
  agent any

  parameters {
    string(name: 'BUCKET', defaultValue: 'thesamuraibucket', description: 'S3 bucket name')
    string(name: 'KEY',    defaultValue: '',               description: 'S3 object key')
  }

  environment {
    AWS_DEFAULT_REGION = 'eu-central-1'
    JENKINS_URL        = "${params.jenkins_url ?: 'https://9216d38c2a3f.ngrok-free.app'}"
  }

  stages {
    stage('Checkout') {
      steps {
        git url: 'https://github.com/NasriMohamedHedi/terraform-infra.git', branch: 'main'
      }
    }

    stage('Terraform Init') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          sh 'terraform init -input=false -reconfigure'
        }
      }
    }

    stage('Terraform Apply') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          sh """
            terraform apply \
              -var 's3_payload_bucket=${BUCKET}' \
              -var 's3_payload_key=${KEY}' \
              -var 'jenkins_url=${JENKINS_URL}' \
              -auto-approve
          """
        }
      }
    }

    stage('Generate Key Pair') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          sh '''
            if ! aws ec2 describe-key-pairs --key-names client-access-key --region eu-central-1 >/dev/null 2>&1; then
              aws ec2 create-key-pair --key-name client-access-key \
                --region eu-central-1 --query 'KeyMaterial' --output text \
                > /tmp/client-access-key.pem

              chmod 400 /tmp/client-access-key.pem
              sudo cp /tmp/client-access-key.pem /var/lib/jenkins/client-access-key.pem
              sudo chmod 400 /var/lib/jenkins/client-access-key.pem
            else
              echo "Key pair client-access-key already exists"
            fi
          '''
        }
      }
    }

    stage('Archive Outputs') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          sh 'terraform output -json > outputs.json'
          archiveArtifacts artifacts: 'outputs.json'
        }
      }
    }

    stage('Send SSH Details') {
      steps {
        // 1) Copy the key into the workspace and archive it
        sh 'cp /var/lib/jenkins/client-access-key.pem client-access-key.pem'
        archiveArtifacts artifacts: 'client-access-key.pem'

        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-terraform-creds',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          script {
            // 2) Extract the EC2 public IP (targeting opendlp-vm)
            def instance_dns_json = sh(
              script: "terraform output -json ec2_public_ips",
              returnStdout: true
            ).trim()
            if (!instance_dns_json) {
              error "Failed to retrieve instance DNS from Terraform output."
            }
            def instance_ip = sh(
              script: "echo '${instance_dns_json}' | jq -r '.\"opendlp-vm\"'",
              returnStdout: true
            ).trim()
            if (!instance_ip || instance_ip == 'null' || instance_ip == 'false') {
              error "Failed to extract valid IP from Terraform output. Got: ${instance_ip}"
            }

            // 3) Pull recipient email from S3 payload
            def clientEmail = sh(
              script: "aws s3 cp s3://${BUCKET}/${KEY} - | jq -r '.client_email'",
              returnStdout: true
            ).trim()
            if (!clientEmail || clientEmail == 'null') {
              error "Failed to retrieve client email from S3 object s3://${BUCKET}/${KEY}."
            }

            // 4) Build SSH command
            def sshCommand = "ssh -i client-access-key.pem ubuntu@${instance_ip}"

            // 5) Compute download URL
            def downloadUrl = "${env.BUILD_URL}artifact/client-access-key.pem"

            // 6) Send email with step-by-step instructions
            mail(
              to:       clientEmail,
              replyTo:  'no-reply@apollo-dojo.com',
              subject:  "üîë Your VM SSH Credentials (Job #${BUILD_NUMBER})",
              body:     """\
Subject: üîë Your EC2 Instance is Ready - Apollo Dojo Samurai Team (Build #${BUILD_NUMBER})

Hello ${clientEmail},

Your EC2 instance, deployed by the Apollo Dojo Samurai Team, is up and running. Follow these step-by-step instructions to connect:

### Step-by-Step Guide to Connect to Your VM
1. **Download the Private Key**:
   - The private key file (client-access-key.pem) is attached to this email.
   - Alternatively, download it from: ${downloadUrl}

2. **Set Permissions on the Key**:
   Save the file and run:
   chmod 400 client-access-key.pem

3. **Connect to the Instance**:
   ${sshCommand}
   (Type ‚Äúyes‚Äù if prompted.)

### Troubleshooting
- Ensure the IP (${instance_ip}) is correct and port 22 is open.
- Verify key permissions with `ls -l client-access-key.pem`.

Cheers,
The Apollo Dojo Samurai Team
""",
              mimeType: 'text/plain'
            )
          }
        }
      }
    }

  } // end stages

  post {
    always {
      sh 'rm -f /tmp/client-access-key.pem outputs.json client-access-key.pem || true'
    }
    success {
      echo "Pipeline completed successfully!"
    }
    failure {
      echo "Pipeline failed. Check logs for details."
    }
  }

} // end pipeline

